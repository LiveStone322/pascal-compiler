#include <vector>
#include <map>
#include <string>
#include "../functions/find_in_vector.cpp"
using namespace std;

class Keys
{
public:
  enum KeysEnum
  {
    star,
    slash,
    equal,
    comma,
    semicolon,
    colon,
    point,
    arrow,
    leftpar,
    rightpar,
    lbracket,
    rbracket,
    flpar,
    frpar,
    later,
    greater,
    laterequal,
    greaterequal,
    latergreater,
    plus,
    minus,
    lcomment,
    rcomment,
    assign,
    twopoints,
    ident,
    floatc,
    intc,
    charc,
    stringc,
    endoffile,
    eolint,
    FALSE,
    TRUE,
    do_,
    if_,
    in_,
    of_,
    or_,
    to_,
    and_,
    div_,
    end_,
    for_,
    mod_,
    nil_,
    not_,
    set_,
    var_,
    case_,
    else_,
    file_,
    goto_,
    only_,
    then_,
    type_,
    unit_,
    uses_,
    with_,
    array_,
    begin_,
    const_,
    label_,
    until_,
    while_,
    downto_,
    export_,
    import_,
    module_,
    packed_,
    record_,
    repeat_,
    vector_,
    string_,
    forward_,
    process_,
    program_,
    segment_,
    function_,
    separate_,
    interface_,
    procedure_,
    qualified_,
    implementation_
  };
  map<string, int> keyMap = {
      {"*", star},
      {"/", slash},
      {"=", equal},
      {",", comma},
      {";", semicolon},
      {":", colon},
      {".", point},
      {"^", arrow},
      {"(", leftpar},
      {")", rightpar},
      {"[", lbracket},
      {"]", rbracket},
      {"{", flpar},
      {"}", frpar},
      {"<", later},
      {">", greater},
      {"<=", laterequal},
      {">=", greaterequal},
      {"<>", latergreater},
      {"+", plus},
      {"-", minus},
      {"(*", lcomment},
      {"*)", rcomment},
      {":=", assign},
      {"..", twopoints},
      {"do", do_},
      {"if", if_},
      {"in", in_},
      {"of", of_},
      {"or", or_},
      {"to", to_},
      {"and", and_},
      {"div", div_},
      {"end", end_},
      {"for", for_},
      {"mod", mod_},
      {"nil", nil_},
      {"not", not_},
      {"set", set_},
      {"var", var_},
      {"case", case_},
      {"else", else_},
      {"file", file_},
      {"goto", goto_},
      {"only", only_},
      {"then", then_},
      {"type", type_},
      {"unit", unit_},
      {"uses", uses_},
      {"with", with_},
      {"array", array_},
      {"begin", begin_},
      {"const", const_},
      {"label", label_},
      {"until", until_},
      {"while", while_},
      {"downto", downto_},
      {"export", export_},
      {"import", import_},
      {"module", module_},
      {"packed", packed_},
      {"record", record_},
      {"repeat", repeat_},
      {"vector", vector_},
      {"string", string_},
      {"forward", forward_},
      {"process", process_},
      {"program", program_},
      {"segment", segment_},
      {"function", function_},
      {"separate", separate_},
      {"interface", interface_},
      {"procedure", procedure_},
      {"qualified", qualified_},
      {"implementation", implementation_}};
  vector<string> names;
  int search_mbol(string name);
};

int Keys::search_mbol(string name)
{
  try
  {
    return keyMap[name];
  }
  catch (exception e)
  {
    if (findInVector(names, name) < 0)
    {
      names.push_back(name);
    }
    return ident;
  }
}